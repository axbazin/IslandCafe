#!/usr/bin/perl -w

use File::Copy;
use Bio::SeqIO;

#Defaults
$verb=0;
$expert=0;
$visual=0;
getOptions();
#my(@Options, $annotation, $outfile);

#If output filename is provided
if (defined $outfile){
	$output=shift(@ARGV);
	$name=$output;
}

#If input file in Genbank format
if (defined($gbk)) {
	$dna=$sequence;
	$name=$infile;
	$in_filename="$infile\_CAFE.fna";
}

#If input file in Fasta format
else {

	if (scalar(@ARGV)<1){
	print "Sequence file not provided\n";
	exit;
	}

	$f = shift @ARGV;
	$in_filename=$f;
	$name=$f if(!defined$outfile);
	#$f=$sequence;
	#Check if sequence file exists
	unless (-e $f) {
		print "Sequence file does not exist\n";
		exit;
	} 
	#Check if sequence file is in fasta format	
	open(F,$f);
	$line= <F>;
	if ($line!~/^>/){
		print "Incorrect sequence file. Please provide sequence file in fasta format\n";
		exit;
	}
	#Get sequence from file
	while($line= <F>){
		$line =~ s/\n//;
		if($line !~ /^>/){
			$dna .=uc($line);
		}
	}

}

#Check only ATCG nucs are present 
@nucs= ('A','T','C','G');
@g=split("",$dna);
foreach(@g){
	$s=$nucs[rand@nucs];
	$_=~s/[^ATCG]/$s/g;
}
open (OUT, ">$name\_CAFE_1");
$m=join("",@g);
print OUT "$m";
$lenm=length($m);
print "Genome loaded\nLength of genome is $lenm bp\n" if ($verb==1); 

#If annotation file is provided

if (!defined$annotation){

	#If genbank file is not provided, check if annotation file exists
	if (!defined$gbk){

		if (scalar@ARGV < 1){
		print "Annotation file does not exist\n";
		exit; 
		}


		$f1 = shift @ARGV;

		#$f1=$ARGV[1];
		#Check if annotation file exists
		unless (-e $f1) {
			print "Annotation file does not exist\n";
			exit;
		} 
	
		open(F1,$f1);
	}

	else {
		open (F1, "$infile\_CAFE.ptt");
	}

	@D=<F1>;
	$a=0;$b=0;$c=0;

	#Check if annotation file is in ptt format
	foreach $D(@D){
		@C=split(/\t/,$D);
		$coords=$C[0];
		($start,$end)=split('\..',$coords);
		$arr1[$a++]=$start;
		$arr2[$b++]=$end;
		$arr3[$c++]=$C[8];
	}
	
	@identifiers=split('\t',$D[2]);

	if (defined $identifiers[0]&& defined $identifiers[1] && defined $identifiers[8]){
		if (($identifiers[0]!~/Location/)|($identifiers[1]!~/Strand/)|($identifiers[8]!~/Product/)){
			print "Incorrect annotation file. Please provide annotation file in ptt format\n";
			exit;
		}
	}

	else {
		print "Incorrect annotation file. Please provide annotation file in ptt format\n";
		exit;
	}

	#Get annotations from ptt file

	#open (PTTOUT, ">$name\_CAFE_gene_coord");
	$gene_counter=0;
	for($i=3;$i<$a;$i++){
		chomp $arr3[$i];
		#print PTTOUT "$arr3[$i]\t$arr1[$i]\t$arr2[$i]\n";
		$st=$arr1[$i];$en=$arr2[$i];$fn=$arr3[$i];
		$gene_start[$gene_counter]=$st;$gene_end[$gene_counter]=$en;$gene_func[$gene_counter]=$fn;
		$gene_counter+=1;
	}

}

#If annotation file is not provided

else{
	#Run Prodigal for predicting genes
	print "Predicting genes using prodigal...\n" if ($verb==1);
	system("prodigal -a $name\_CAFE.faa -f sco -i $in_filename -o $name\_CAFE_sco_file.txt -q"); #bartonella =.fna file
	
	$sco="$name\_CAFE_sco_file.txt";
	open (S, $sco);
	$a=0;$b=0;$c=0;
	%hash=();
	while (<S>){
		chomp $_;
		next if $_=~/#/;
		@coord=split('_', $_);
		$start[$a++]=$coord[1];
		$end[$b++]=$coord[2];
		$strand[$c++]=$coord[3];
	}
	print "Identified $a genes\n" if ($verb==1);
	print "Scanning genome for presence of genomic island specific marker genes...\n" if ($verb==1);
	
	#Run hmmer for annnotating genes
	system("hmmscan -o $name\_CAFE_stdout_out.txt --tblout $name\_CAFE_table.txt cafe_database_table $name\_CAFE.faa");
	$f="$name\_CAFE_table.txt";
	open(F,$f);


	#open hmmer output file
	while (<F>){
		chomp $_;
		next if $_=~/#/;
		@line=split('\s+',$_);	
		push(@id1,$line[2]);
		push (@evalue,$line[4]);
		$annot=join(' ', @line[18..$#line]);
		push(@func1, $annot);
	
	}

	#Get all markers with BLAST evalue < 0.01
	for ($i=0; $i<scalar(@id1); $i++){
		next if ($id1[$i] eq $id1[$i-1]);
		@idd=split('_',$id1[$i]);
		if ($evalue[$i]<0.01){  #Count only if evalue is less than 0.01.
			$id=$idd[1];
			$genome=$idd[0];
			$func=$func1[$i];

			$hash{$id}=$func unless !defined $idd[1];
		}
	
		#print "$id\t$func[$i]\n";
	}


	#Make ptt file for annotated genes
	open (OUT, ">$name\_CAFE.ptt");
	print OUT "$genome\n";
	print OUT "$c proteins\n";
	print OUT "Location\tStrand\tLength\tPID\tGene\tSynonym\tCode\tCOG\tProduct\n";

	$marker_counter=0;
	for ($i=0;$i<$a;$i++){
		$num=$i+1;
		$length=int(($end[$i]-$start[$i])/3);
	
		if (exists($hash{$num})){
			print OUT "$start[$i]..$end[$i]\t$strand[$i]\t$length\t-\t-\t-\t-\t-\t$hash{$num}\ transposase\n";
			$arr1[$i]=$start[$i];$arr2[$i]=$end[$i];$arr3[$i]=$hash{$num};
			$marker_counter+=1;
		}
		else {
			print OUT "$start[$i]..$end[$i]\t$strand[$i]\t$length\t-\t-\t-\t-\t-\t-\n";
			$arr1[$i]=$start[$i];$arr2[$i]=$end[$i];$arr3[$i]="-";
		}
	
	}
	
	#open (PTTOUT, ">$name\_CAFE_gene_coord");
	$gene_counter=0;

	for($i=0;$i<$a;$i++){
	
	#print PTTOUT "$arr3[$i]\t$arr1[$i]\t$arr2[$i]\n";
	$st=$arr1[$i];$en=$arr2[$i];$fn=$arr3[$i];
	$gene_start[$gene_counter]=$st;$gene_end[$gene_counter]=$en;$gene_func[$gene_counter]=$fn;
	$gene_counter+=1;
	}
	print "Identified $marker_counter genomic island marker genes\n" if ($verb==1);

}


#Run segmentation and clustering algorithm using compiled c program.

#If user has defined thresholds

if (defined ($seg) && defined ($clus1) && defined ($clus2)){
	system("./cafe.out $name\_CAFE_1 $seg $clus1 $clus2 $verb"); 
}

#Default thresholds

else {
	
	system("./cafe.out $name\_CAFE_1 0.9999999999 0.9999999999999 0.9999999999999 $verb");
} 	

#Parse segment and clustering output file. Combine contiguous segments with same cluster id.

$sc_out='cafe_temp'; #seg-clus output file
open (SCOUT, $sc_out);
@SC=<SCOUT>;
#open(F1,">$name\_CAFE_out");
$sca=0;$scb=0;$scc=0;
foreach (@SC){
	@SC_C=split(/\s+/,$_);
	$sc_arr1[$sca++]=$SC_C[0];
	$sc_arr2[$scb++]=$SC_C[1];
	$sc_arr3[$scc++]=$SC_C[2];
}

$counter=0;
for ($i=0; $i<$scc; $i++){
	if ($sc_arr3[$i]==1){
		$counter=1;
	}
}

$min=1000;

if($counter==0){
	for ($i=0; $i<$scc; $i++){
		if ($sc_arr3[$i]<$min){
			$min=$sc_arr3[$i];
		}
	}
}

if($counter==0){
	for ($i=0; $i<$scc; $i++){
		$sc_arr3[$i]=$sc_arr3[$i]-$min+1;
	}
}

$k=0;

for ($i=0; $i<$scc; $i++){
	#if ($i==$scc-1){print F1 "$sc_arr1[$i]\t$sc_arr2[$i]\t$sc_arr3[$i]\n"; }
	#else{
	if($sc_arr3[$i]==$sc_arr3[$i+1]){
		$sc_arr1[$i+1]=$sc_arr1[$i];
		if ($i+1==$scc){
			#print F1 "$sc_arr1[$i]\t$sc_arr2[$i]\t$sc_arr3[$i]\n";
			$cst=$sc_arr1[$i];$cend=$sc_arr2[$i];$cclu=$sc_arr3[$i];
			$cond_arr1[$k]=$cst;$cond_arr2[$k]=$cend;$cond_arr3[$k]=$cclu;
			$k++;
		}
	}
	 
	else{
		#print F1 "$sc_arr1[$i]\t$sc_arr2[$i]\t$sc_arr3[$i]\n";
		$cst=$sc_arr1[$i];$cend=$sc_arr2[$i];$cclu=$sc_arr3[$i];
		$cond_arr1[$k]=$cst;$cond_arr2[$k]=$cend;$cond_arr3[$k]=$cclu;		
		$k++;
	}
	#}
	
}			
		
#Calculate size of each cluster as a percentage of the length of genome
#open(F3,">$name\_CAFE_clustersize");

$length=length($m);
$max=0;
$size=0;

for($i=0;$i<$k;$i++){
	if($cond_arr3[$i]>$max){
		$max=$cond_arr3[$i];
	}
}

#print F3 "max is $max\n";
%sort_hash=();

for($i=0;$i<$k;$i++){

	for($j=1;$j<($max+1);$j++){
		if($cond_arr3[$i]==$j){
			$size[$j]+=$cond_arr2[$i]-$cond_arr1[$i]+1;
			
		}
	}			
}

for($j=1;$j<($max+1);$j++){
	$percent[$j]=(($size[$j]/$length)*100);
	$pc=$percent[$j];
	$sort_hash{$pc}=$j;
	#print F3 "$j $size[$j] $percent[$j]\n";
	
}

$percent[0]=0;

#Identify two largest clusters by size.
#shift(@percent);
@sortedpc = sort { $a <=> $b } @percent;
$large_cl1=$sortedpc[-1];
$large_cl2=$sortedpc[-2];
$lc1=$sort_hash{$large_cl1};
$lc2=$sort_hash{$large_cl2};

#print F3 "the two largest clusters are: $lc1 and $lc2\n";

#Assign genes to clusters identified by segmentation and clustering algorithm.

#open (PYOUT, ">$name\_CAFE_extract_out");
$gex_counter=0;
for ($i=0;$i<$k;$i++){
	for ($l=0;$l<$gene_counter;$l++){
		if($cond_arr1[$i]<=$gene_start[$l] && $cond_arr1[$i]<=$gene_end[$l] && $gene_start[$l]<=$cond_arr2[$i] && $gene_end[$l]<=$cond_arr2[$i]){
			#print PYOUT "$cond_arr3[$i]\t$cond_arr1[$i]\t$cond_arr2[$i]\t$gene_func[$l]\t$gene_start[$l]\t$gene_end[$l]\n";
			$sc_clus[$gex_counter]=$cond_arr3[$i];$sc_start[$gex_counter]=$cond_arr1[$i];$sc_end[$gex_counter]=$cond_arr2[$i];
			$g_func[$gex_counter]=$gene_func[$l];$g_start[$gex_counter]=$gene_start[$l];$g_end[$gex_counter]=$gene_end[$l];
			$gex_counter+=1;
		}
		elsif($cond_arr1[$i]>=$gene_start[$l] && $gene_end[$l]>=$cond_arr1[$i] && $cond_arr2[$i]>=$gene_end[$l]){ 
			#print PYOUT "$cond_arr3[$i]\t$cond_arr1[$i]\t$cond_arr2[$i]\t$gene_func[$l]\t$gene_start[$l]\t$gene_end[$l]\n";
			$sc_clus[$gex_counter]=$cond_arr3[$i];$sc_start[$gex_counter]=$cond_arr1[$i];$sc_end[$gex_counter]=$cond_arr2[$i];
			$g_func[$gex_counter]=$gene_func[$l];$g_start[$gex_counter]=$gene_start[$l];$g_end[$gex_counter]=$gene_end[$l];
			$gex_counter+=1;			
		}
		elsif($cond_arr1[$i]<=$gene_start[$l] && $gene_start[$l]<=$cond_arr2[$i] && $cond_arr2[$i]<=$gene_end[$l]){ 
			#print PYOUT "$cond_arr3[$i]\t$cond_arr1[$i]\t$cond_arr2[$i]\t$gene_func[$l]\t$gene_start[$l]\t$gene_end[$l]\n";
			$sc_clus[$gex_counter]=$cond_arr3[$i];$sc_start[$gex_counter]=$cond_arr1[$i];$sc_end[$gex_counter]=$cond_arr2[$i];
			$g_func[$gex_counter]=$gene_func[$l];$g_start[$gex_counter]=$gene_start[$l];$g_end[$gex_counter]=$gene_end[$l];
			$gex_counter+=1;
		}
	}
		
}

for ($i=0;$i<$gex_counter;$i++){
	$g_func[$i]=~s/[^a-zA-Z0-9]/ /g;
}


@Dlib=qw(transposase transposon integrase integration phage prophage bacteriophage mobile mobility insertion recombinase plasmid);
$count2=0;
$total_count=0;
foreach(@Dlib){ #for all words in library
	$count=0;
	$_[$count2]=0;
	for($i=0;$i<$gex_counter;$i++){ #for all genes
				
		@splitarr7=split(/ /,$g_func[$i]);
		foreach $splitarr7(@splitarr7){ #for each word in line
		               
			if($_=~m/$splitarr7/i){
				if (length($_)==length($splitarr7)){
					$count+=1;
					$_[$count2]+=1;
					$total_count+=1;
				}
			}
									
		} 
					      
		@splitarr7='';
	}

}
##print "Cluster_id\t" if ($verb==1);
foreach(@Dlib){
##print "$_\t" if ($verb==1);
}
##print "total_markers\n" if ($verb==1);
@splitarr7='';

$lib_word_counter=0;

$total_word=0;
$total_words_per_cluster=0;

for($j=1;$j<$max+1;$j++){#for all cluster ids
	##print"$j\t" if ($verb==1);
	$count2 =0;
	foreach(@Dlib){ #for all words in library
		
		$lib_word_counter+=1;
		$count=0;
		$count1=0;
 		$count1[$j]=0;	
  		for($i=0;$i<$gex_counter;$i++){ #for all genes
			if($sc_clus[$i]==$j){ #if cluster id  match
				#$g_func[$i]=~s/,//g;
				@splitarr7=split(/ /,$g_func[$i]);
		
				foreach $splitarr7(@splitarr7){ #for each word in line
				
					if($_=~m/$splitarr7/i){
						if (length($_)==length($splitarr7)){
							
							$count+=1;
							$count1[$j]+=1;
						   }
				   	}
				} 
			}
			@splitarr7='';
		}

		$count2+=$count1[$j];
		##print "$count1[$j]\t" if ($verb==1);	
		
	}

	##print "$count2\n" if ($verb==1);
	$total_words_per_cluster[$j]=$count2;
	$total_word+=$count2;

}


$j=1;

open(FOUT1, ">$name\_CAFE_enrichment.txt");

if($total_word==0){$total_word=1;}

shift(@percent);
$e_counter=0;
foreach$D2(@percent){
	#print "$total_words_per_cluster[$j]\t$j\t$D2\n";
	$percentage=($total_words_per_cluster[$j]/$total_word)*100;
	$enrichment=$percentage/$D2;
	#print "$percent\t$D2\t$enrichment\t$j\n";
	print FOUT1 "$j\t$D2\t$enrichment\n";
	$enrich[$e_counter]=$enrichment;
	$e_counter+=1;
	$j+=1;
}

for ($i=0;$i<scalar(@cond_arr1);$i++){
	#print "$cond_arr1[$i]\t$cond_arr2[$i]\t$cond_arr3[$i]\n";#print condensed array
}

for ($i=0;$i<scalar(@percent);$i++){
	#print "$i\t$percent[$i]\t$enrich[$i]\n";
}

#Merge two largest clusters if they are not enriched in marker genes

$j=$lc1;
$k=$lc2;
$max=$large_cl1;
$max1=$large_cl2;



if($max1>=20){
	if($enrich[$k]<=1.5){
		print "merging native clusters $j and $k using marker gene information\n" if ($verb==1);
		for($i=0;$i<scalar(@cond_arr1);$i++){
			if ($cond_arr3[$i]==$k){
				$cond_arr3[$i]=$j;
			}
		#print "$cond_arr1[$i]\t$cond_arr2[$i]\t$cond_arr3[$i]\n";#print condensed array
		}
		
	}
	else{
		print "Native cluster is cluster $j\n" if ($verb==1);
	}
}

else{
	print "Native cluster is cluster $j\n" if ($verb==1);
}

open (COUT, ">$name\_CAFE_seg_clus_out.txt");

for($i=0;$i<scalar(@cond_arr1);$i++){

	if ($cond_arr3[$i]!=$j){
		$cond_arr3[$i]='121212'; #alien
		print COUT "$cond_arr1[$i]\t$cond_arr2[$i]\tAlien\n";
	}
	else{
		print COUT "$cond_arr1[$i]\t$cond_arr2[$i]\tNative\n";
		$cond_arr3[$i]='343434'; #native
	}

}

#Get CAFE full version GIs
$out_file= "$name\_CAFE_full_version.txt";
open (OUTFILE, ">$out_file");
$is_counter=0;
$gic=0;
$cff=0;
for($i=0;$i<scalar(@cond_arr1)-1;$i++){

	if($cond_arr3[$i]==$cond_arr3[$i+1]){
		$cond_arr1[$i+1]=$cond_arr1[$i];
	}

	else{
		if($cond_arr3[$i]==121212){
			if($cond_arr2[$i]-$cond_arr1[$i]>7999){
				$is_counter+=1;
				if ($is_counter==1){
					print OUTFILE "Genomic_island	Start	End	Length\n";
				}
				$cfgi_start[$gic]=$cond_arr1[$i];
				$cfgi_end[$gic]=$cond_arr2[$i];
				$gic+=1;
				$lenn=$cond_arr2[$i]-$cond_arr1[$i]+1;
				$cafe_f_gi_start[$cff]=$cond_arr1[$i];$cafe_f_gi_end[$cff]=$cond_arr2[$i];$cff+=1; 	
				print OUTFILE "GI-$is_counter\t$cond_arr1[$i]\t$cond_arr2[$i]\t$lenn\n";
			}
		}

	}
}


if ($is_counter==0){
	print OUTFILE "No Genomic islands detected\n";
}

push (@Dlib, 'Genomic island', 'Pathogenicity island');

$nul=0;
$cfm=0;

#Get CAFE marker version GIs
open (OUTFILE1, ">$name\_CAFE_marker_version.txt");
for ($i=0;$i<$gic;$i++){
	$count=0;
	for($j=0;$j<$gex_counter;$j++){
		if($cfgi_start[$i]==$g_start[$j]||$cfgi_end[$i]==$g_end[$j]||($cfgi_start[$i]<=$g_start[$j]&&$cfgi_end[$i]>=$g_end[$j])){
			$g_func[$j]=~s/^\s//;
			foreach(@Dlib){
				if($g_func[$j]=~m/$_/i){
					$count+=1;
					
					if($count==1){
						$nul+=1;
						if ($nul==1){print OUTFILE1 "Genomic_island	Start	End	Length\n";}
						$gilen=	$cfgi_end[$i]-$cfgi_start[$i]+1;
						$cafe_m_gi_start[$cfm]=$cfgi_start[$i];$cafe_m_gi_end[$cfm]=$cfgi_end[$i];$cfm+=1; 
						print OUTFILE1 "GI-$nul\t$cfgi_start[$i]\t$cfgi_end[$i]\t$gilen\n";
					}
				}
				
			}
		}
	}
}

if($nul==0){
	print "No Genomic islands detected\n";
}

#For generating genomic island map using CGview
if ($visual==1){
	print "Preparing files for making visualizing genomic islands\n" if ($verb==1);
	open (VOUT, ">$name\_CAFE_marker_feature_table");
	open (VOUTF, ">$name\_CAFE_full_feature_table");	
	print VOUT "seqname\tsource\tfeature\tstart\tend\tscore\tstrand\tframe\n";
	print VOUTF "seqname\tsource\tfeature\tstart\tend\tscore\tstrand\tframe\n";
	for ($i=0;$i<$cfm;$i++){
		print VOUT "gene$i\t.\tgene\t$cafe_m_gi_start[$i]\t$cafe_m_gi_end[$i]\t1\t.\t.\n";
	}

	for ($i=0;$i<$cff;$i++){
		print VOUTF "gene$i\t.\tgene\t$cafe_f_gi_start[$i]\t$cafe_f_gi_end[$i]\t1\t.\t.\n";
	}	


	open(VISL, ">$name\_CAFE_label"); 
	print VISL "gene\t1";
	if ($verb==0){
		system ("perl cgview_xml_builder.pl -sequence $in_filename -verbose s -genes $name\_CAFE_marker_feature_table -title \"$name\" -labels_to_show $name\_CAFE_label -custom featureThickness=45 labelFontSize=45 -output $name\_CAFE_marker.xml");
		system ("perl cgview_xml_builder.pl -sequence $in_filename -verbose s -genes $name\_CAFE_full_feature_table -title \"$name\" -labels_to_show $name\_CAFE_label -custom featureThickness=45 labelFontSize=45 -output $name\_CAFE_full.xml");
		
	}
	else {
		system ("perl cgview_xml_builder.pl -sequence $in_filename -genes $name\_CAFE_marker_feature_table -title \"$name\" -labels_to_show $name\_CAFE_label -custom featureThickness=45 labelFontSize=45 -output $name\_CAFE_marker.xml");
		system ("perl cgview_xml_builder.pl -sequence $in_filename -genes $name\_CAFE_full_feature_table -title \"$name\" -labels_to_show $name\_CAFE_label -custom featureThickness=45 labelFontSize=45 -output $name\_CAFE_full.xml");
	}

	push (@vers, "$name\_CAFE_marker.xml", "$name\_CAFE_full.xml");
	$ci=0;

	#Edit XML file to include labels and color GIs
	foreach $vers (@vers){ 
		open(VISF, $vers);
		@file=<VISF>;
		$count=0;
		open(VISF1,">$name\_CAFE1\_$ci.xml");	
		

		foreach(@file){
			if ($_=~m/showLabel/){
				$count+=1;
			}
	
		}		

		foreach(@file){
			if ($_=~m/showLabel/){
				$_=~s/showLabel="false"/label=\"GI-$count" showLabel="true"/;
				$count-=1;
			}
			if ($_=~m/plain, 20/){
				$_=~s/plain, 20/plain, 45/;
			}
			if ($_=~m/showShading="true"/){
				$_=~s/showShading="true"/showShading="false"/;
			}
			if ($_=~m/51,51,51/){
					$_=~s/51,51,51/0,0,204/;
			}
			if ($_=~m/plain, 80" text/){
					$_=~s/plain, 80" text/italics, 80" text/;
			}


			print VISF1 "$_";
		}				

		$ci+=1;
	}
	system ("java -jar cgview.jar -i $name\_CAFE1_0.xml -o $name\_CAFE_marker.png > $name\_CAFE_CGViewout");
	system ("java -jar cgview.jar -i $name\_CAFE1_1.xml -o $name\_CAFE_full.png > $name\_CAFE_CGViewout1");	
}

#system ("rm temp");

if ($expert==0){
	system ("rm $name\_CAFE_stdout_out.txt") if (defined$annotation);
	system ("rm $name\_CAFE_1");
	system ("rm $name\_CAFE.faa") if (defined$annotation);
	system ("rm $name\_CAFE.ptt") if (defined$annotation);
	system ("rm $name\_CAFE_sco_file.txt") if (defined$annotation);
	system ("rm $name\_CAFE_seg_clus_out.txt");
	system ("rm $name\_CAFE_table.txt") if (defined$annotation);
	system ("rm $name\_CAFE.fna") if (defined$gbk);	
	system ("rm $name\_CAFE_enrichment.txt");
	system ("rm $name\_CAFE_full.xml") if ($visual==1);
	system ("rm $name\_CAFE_marker.xml") if ($visual==1);
	system ("rm $name\_CAFE1_0.xml") if ($visual==1);
	system ("rm $name\_CAFE1_1.xml") if ($visual==1);
	system ("rm $name\_CAFE_marker_feature_table") if ($visual==1);
	system ("rm $name\_CAFE_full_feature_table") if ($visual==1);	
	system ("rm $name\_CAFE_label") if ($visual==1);
	system ("rm $name\_CAFE_CGViewout1") if ($visual==1);
	system ("rm $name\_CAFE_CGViewout") if ($visual==1);	
	system ("rm cafe_temp");
}


sub usage {

	foreach (@Options) {
		if (ref) {
			my $def = defined($_->{DEFAULT}) ? " (default '$_->{DEFAULT}')" : "";
			$def = ($def ? ' (default OFF)' : '(default ON)') if $_->{OPT} =~ m/!$/;
			my $opt = $_->{OPT};
			$opt =~ s/!$//; 
			$opt =~ s/=s$/ [X]/; 
			$opt =~ s/=i$/ [N]/;
			$opt =~ s/=f$/ [n.n]/;
			printf STDERR "  --%-15s %s%s\n", $opt, $_->{description}, $def;
		}
		else {
			print STDERR "$_\n";
		}      
	}
 	print STDERR "\nUsage:\n  $0 [options] genome.fna annotation.ptt\n\t\tOR\n  $0 [options] -annot genome.fna\n\t\tOR\n  $0 [options] -gbk genome.gbk\n\n";

  	exit;
}

sub info {
	print "CAFE is a genomic island prediction tool. This is CAFE v1.0 2017, written by Mehul Jani <mehuljani\@my.unt.edu>\n";
	exit;
}


sub Thres {
	$seg=shift(@ARGV);
	$clus1=shift(@ARGV);
	$clus2=shift(@ARGV);
	if (defined ($seg) && defined ($clus1) && defined ($clus2)){
		if ($seg=~m/^-?\d+\.?\d*$/ && $clus1=~m/^-?\d+\.?\d*$/ && $clus2=~m/^-?\d+\.?\d*$/){ #matches real numbers

			if ($seg<0||$seg>1||$clus1<0||$clus1>1||$clus2<0||$clus2>1){ #check if thresholds are in range
				print "Thresholds should be in range 0 to 1\n";
				exit;
			}
			else {		
				print "Thresholds are $seg $clus1 $clus2\n";
			}
		}
		else{
			print "Input segmentation contiguous clustering and non-contiguous clustering thresholds\n";
			exit;
		}
		
	}
	else {
		
		print "Input segmentation contiguous clustering and non-contiguous clustering thresholds\n";
		exit;
	}
}

sub verb {
	$verb=1;
}

sub expert {
	$expert=1;
}

sub visual {
	$visual=1;
}

sub gbk {
	$gbk=1;
	$infile=shift(@ARGV);
	unless (-e $infile) {
		print "Sequence file does not exist\n";
		exit;
	} 
	my $seqio = Bio::SeqIO->new(
		                        -file   =>  $infile,
		                        -format =>  'genbank',
		                    );
	open(my $PTT, ">", $infile . "_CAFE.ptt");
	open(FNA, ">", $infile . "_CAFE.fna");
	open(FAA, ">", $infile . "_CAFE.faa");
	my %tags = ();
	$gene_no=0;
	while (my $seq = $seqio->next_seq()) {
	
		my $header1 = $seq->desc() || 'unknown' . " - 1.." . $seq->length();
		$sequence=$seq->seq;	
		print FNA ">$header1 ", "\n", $sequence;

		my @CDS = $seq->get_SeqFeatures('CDS');
		my $featcnt = 0;
		
		print $PTT $header1 . "\n";
		print $PTT scalar(@CDS) . " proteins" . "\n";
		print $PTT "Location\tStrand\tLength\tPID\tGene\tSynonym\tCode\tCOG\tProduct\n";


		for my $feature (@CDS){

			next if $feature->has_tag('pseudo');

			my $tag = $feature->primary_tag();
			++$tags{$tag};


			my $start = $feature->start();
			my $stop = $feature->end();
			my $strand = $feature->strand();
			my $length = $feature->length();
			my @pid = $feature->has_tag('protein_id') ? $feature->get_tag_values('protein_id') : $feature->get_tag_values('locus_tag');
			my @gene = $feature->has_tag('gene') ? $feature->get_tag_values('gene') : '-';
			my @synonym = $feature->get_tag_values('locus_tag');
			my $code = '-';
			my $cog = '-';
			my @description = $feature->get_tag_values('product');
			my @protein =$feature->get_tag_values('translation');
			
			if ($strand > 0) {
			    $strand = '+';
			} elsif ($strand < 0) {
			    $strand = '-';
			}
			print $PTT $start . ".." . "$stop\t$strand\t$length\t$pid[0]\t$gene[0]\t$synonym[0]\t$code\t$cog\t$description[0]\n";

			print FAA ">$gene_no\n$protein[0]\n";
			$gene_no++;
			#my $protein= $feature->seq() ;
			#print "$protein\n"
		}

	}
}


#getOptions();

sub getOptions {
	use Getopt::Long;

	@Options = (
	"",'Options:',
	{OPT=>"help",    VAR=>\&usage,             description=>"This help"},
	{OPT=>"info", VAR=>\&info, description=>"Information about program"},
	'Input:',
	{OPT=>"annot", VAR=>\$annotation, description=>"Annotate marker genes (Requires prodigal and Hmmer)"},
	{OPT=>"Thres", VAR=>\&Thres, description=>"Provide segmentation, contiguous clustering and non-contiguous clustering thresholds (range: 0-1)"},
	{OPT=>"gbk", VAR=>\&gbk, description=>"Use genbank as input file"},
	'Output:',
	{OPT=>"out", VAR=>\$outfile, description=>"Output file name"},
	{OPT=>"verbose", VAR=>\&verb, description=>"print on screen"},	
	{OPT=>"expert", VAR=>\&expert, description=>"keep temporary files for user analyses"},
	{OPT=>"visual", VAR=>\&visual, description=>"Make map of genomic islands (Requires CGView)"},
	
	
	);
	(!@ARGV) && (usage());
	&GetOptions(map {$_->{OPT}, $_->{VAR}} grep { ref } @Options) || usage();
	foreach (@Options) {
		if (ref $_ && defined($_->{DEFAULT}) && !defined(${$_->{VAR}})) {
		${$_->{VAR}} = $_->{DEFAULT};
	}
  }
}
